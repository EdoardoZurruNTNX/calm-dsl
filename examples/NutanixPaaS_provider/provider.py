# THIS FILE IS AUTOMATICALLY GENERATED.
# Disclaimer: Please test this file before using in production.
"""
Generated provider DSL (.py)
"""

import json  # no_qa
import os  # no_qa

from calm.dsl.builtins import *  # no_qa
from calm.dsl.builtins import CalmTask as CalmVarTask
from calm.dsl.builtins.models.task import Status, ProviderTask as CalmTask
from calm.dsl.constants import CLOUD_PROVIDER as PROVIDER, RESOURCE_TYPE
from calm.dsl.runbooks import parallel, branch

# Secret Variables
# Note: Don't modify file data, as it is the encoded secrets fetched from the server
CloudProvider_NutanixPaaS_auth_schema_password = read_local_file(
    "CloudProvider_NutanixPaaS_auth_schema_password"
)

# Credentials

# ResourceTypes


class VM(ResourceType):
    """Resource Type to manage Nutanix Virtual Machines. Built using new V4 APIs.

    API version that start with prefix "a" are experimental and not meant for production use"""

    resource_kind = "Compute"

    icon_name = "VM"

    schemas = []

    variables = [
        CalmVariable.Simple(
            "v4.0.b1",
            label="",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="vm_api_version",
        ),
        CalmVariable.Simple(
            "v4.0.b2",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="cluster_mgt_api_version",
        ),
        CalmVariable.Simple(
            "v4.0.b1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="networking_api_version",
        ),
        CalmVariable.Simple(
            "v4.0.b1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="prism_api_version",
        ),
    ]

    @action
    def Create(type="resource_type_create"):
        """Action to create a VM"""

        wait = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Wait",
            default="Yes",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Whether to wait for the operation to complete",
        )
        categories = CalmVariable.Simple.multiline(
            "",
            label="Categories",
            regex="^(.|\\n)*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Comma separated names of categories ",
        )
        cloud_init = CalmVariable.Simple.multiline(
            "",
            label="Cloud init",
            regex="^(.|\\n)*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Cloud init scripts used when creating the VM",
        )
        sys_prep = CalmVariable.Simple.multiline(
            "",
            label="Sys Prep",
            regex="^(.|\\n)*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Sys prep scripts used when creating the VM",
        )
        subnet = CalmVariable.Simple(
            "",
            label="Subnet",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Name of the subnet to create the VM",
        )
        iso_image = CalmVariable.Simple(
            "",
            label="ISO Image",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Name of the iso image needed to create the CD-ROM",
        )
        disk_image = CalmVariable.Simple(
            "",
            label="Disk Image",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Name of the disk image needed to create the disk",
        )
        storage_container = CalmVariable.Simple(
            "",
            label="Storage Container",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="This reference is for disk level storage container preference. This preference specifies the storage container to which this disk belongs",
        )
        disk_size_in_bytes = CalmVariable.Simple.int(
            "",
            label="Size of the disk in Bytes",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Size of the disk in Bytes\n\n",
        )
        num_of_sockets = CalmVariable.Simple.int(
            "1",
            label="Number of vCPU sockets",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Number of vCPU sockets\n\n",
        )
        num_cores_per_socket = CalmVariable.Simple.int(
            "2",
            label="Number of cores per socket",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Number of cores per socket",
        )
        num_threads_per_core = CalmVariable.Simple.int(
            "1",
            label="Number of threads per core",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Number of threads per core",
        )
        memory_size_bytes = CalmVariable.Simple.int(
            "2000000000",
            label="Memory size in bytes",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Memory size in bytes",
        )
        cluster = CalmVariable.Simple(
            "",
            label="Cluster",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Reference to a cluster\n\n",
        )
        description = CalmVariable.Simple(
            "",
            label="VM description",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="VM description\n\n",
        )
        vm_name = CalmVariable.Simple(
            "",
            label="VM Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Name of the VM to be created",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Create VM",
            filename=os.path.join(
                "scripts", "ResourceType_VM_Action_Create_Task_CreateVM.py"
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def Delete(type="resource_type_delete"):
        """Action to delete a VM"""

        wait = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Wait",
            default="Yes",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Whether to wait for the operation to complete",
        )
        vm_extId = CalmVariable.Simple(
            "",
            label="VM ExtID",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The globally unique identifier of a VM",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Delete VM",
            filename=os.path.join(
                "scripts", "ResourceType_VM_Action_Delete_Task_DeleteVM.py"
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def List(type="resource_type_list"):
        """Action to List VMs"""

        page = CalmVariable.Simple.int(
            "0",
            label="Page",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results",
        )
        limit = CalmVariable.Simple.int(
            "50",
            label="Limit",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.",
        )
        filter = CalmVariable.Simple(
            "",
            label="Filter",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions. For example, filter '$filter=name eq 'karbon-ntnx-1.0' would filter the result on cluster name 'karbon-ntnx1.0', filter '$filter=startswith(name, 'C')' would filter on cluster name starting with 'C'.",
        )
        orderby = CalmVariable.Simple(
            "name",
            label="Order By",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, '$orderby=templateName desc' would get all templates sorted by templateName in descending order",
        )
        select = CalmVariable.Simple(
            "",
            label="Select",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the OData V4.01 URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="vms",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="List VMs",
            filename=os.path.join(
                "scripts", "ResourceType_VM_Action_List_Task_ListVMs.py"
            ),
            variables=["vms"],
        )

    @action
    def PerformOperation(name="Perform Operation", type="resource_type_generic"):
        """Action to perform a VM operation"""

        wait = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Wait",
            default="Yes",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Whether to wait for the operation to complete",
        )
        action = CalmVariable.WithOptions(
            [
                "reboot",
                "shutdown",
                "guest-reboot",
                "guest-shutdown",
                "power-on",
                "power-off",
                "power-cycle",
                "reset",
            ],
            label="Action",
            default="power-on",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Name of the action that needs to be performed",
        )
        vm_extId = CalmVariable.Simple(
            "",
            label="VM ExtID",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The globally unique identifier of a VM",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Perform VM operation",
            filename=os.path.join(
                "scripts",
                "ResourceType_VM_Action_PerformOperation_Task_PerformVMoperation.py",
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def Clone(type="resource_type_generic"):
        """Action to clone a VM"""

        wait = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Wait",
            default="Yes",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Whether to wait for the operation to complete ",
        )
        num_threads_per_core = CalmVariable.Simple.int(
            "",
            label="Number of threads per core",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Number of threads per core",
        )
        num_cores_per_socket = CalmVariable.Simple.int(
            "",
            label="Number of cores per socket",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Number of cores per socket",
        )
        num_of_sockets = CalmVariable.Simple.int(
            "",
            label="Number of vCPU sockets",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Number of vCPU sockets",
        )
        memory_size_bytes = CalmVariable.Simple.int(
            "",
            label="Memory size in bytes",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Memory size in bytes",
        )
        clone_from_extId = CalmVariable.Simple(
            "",
            label="Clone From ExtId",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The globally unique identifier of a VM",
        )
        cloned_vm_name = CalmVariable.Simple(
            "",
            label="Cloned VM Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Name of the cloned vm",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Clone VM",
            filename=os.path.join(
                "scripts", "ResourceType_VM_Action_Clone_Task_CloneVM.py"
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def Get(type="resource_type_generic"):
        """Action to fetch a VM by name"""

        vm_extId = CalmVariable.Simple(
            "",
            label="VM ExtID",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The globally unique identifier of a VM",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="vm",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Get VM",
            filename=os.path.join(
                "scripts", "ResourceType_VM_Action_Get_Task_GetVM.py"
            ),
            variables=["vm"],
        )

    @action
    def Update(type="resource_type_generic"):
        """Action to update a VM"""

        description = CalmVariable.Simple(
            "",
            label="VM description",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="VM description",
        )
        categories = CalmVariable.Simple.multiline(
            "",
            label="Categories",
            regex="^(.|\\n)*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Comma seperated names of categories",
        )
        num_of_sockets = CalmVariable.Simple.int(
            "",
            label="Number of vCPU sockets",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Number of vCPU sockets",
        )
        num_cores_per_socket = CalmVariable.Simple.int(
            "",
            label="Number of cores per socket",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Number of cores per socket",
        )
        num_threads_per_core = CalmVariable.Simple.int(
            "",
            label="Number of threads per core",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Number of threads per core",
        )
        memory_size_bytes = CalmVariable.Simple.int(
            "",
            label="Memory size in bytes",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Memory size in bytes",
        )
        cluster = CalmVariable.Simple(
            "",
            label="Cluster",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Reference to a cluster\n",
        )
        subnet = CalmVariable.Simple(
            "",
            label="Subnet",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Name of the subnet to create the VM",
        )
        iso_image = CalmVariable.Simple(
            "",
            label="ISO Image",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Name of the iso image needed to create the CD-ROM",
        )
        disk_image = CalmVariable.Simple(
            "",
            label="Disk Image",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Name of the disk image needed to create the disk",
        )
        disk_size_in_bytes = CalmVariable.Simple.int(
            "",
            label="Size of the disk in Bytes",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Size of the disk in Bytes",
        )
        storage_container = CalmVariable.Simple(
            "",
            label="Storage Container",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="This reference is for disk level storage container preference. This preference specifies the storage container to which this disk belongs",
        )
        wait = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Wait",
            default="Yes",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Whether to wait for the operation to complete ",
        )
        cloud_init = CalmVariable.Simple.multiline(
            "",
            label="Cloud init",
            regex="^(.|\\n)*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Cloud init scripts used when creating the VM",
        )
        sys_prep = CalmVariable.Simple.multiline(
            "",
            label="Sys Prep",
            regex="^(.|\\n)*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Sys prep scripts used when creating the VM",
        )
        vm_extId = CalmVariable.Simple(
            "",
            label="VM ExtID",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The globally unique identifier of a VM",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Update VM",
            filename=os.path.join(
                "scripts", "ResourceType_VM_Action_Update_Task_UpdateVM.py"
            ),
            variables=["task_uuid", "task_status"],
        )


class Subnet(ResourceType):
    """Resource Type to manage Nutanix Subnets"""

    resource_kind = "Network"

    icon_name = "Subnet"

    schemas = []

    variables = []

    @action
    def CreateNutanixIPAMSubnet(
        name="Create Nutanix IPAM Subnet", type="resource_type_create"
    ):
        """Action to create Nutanix IPAM"""

        description = CalmVariable.Simple(
            "",
            label="Description (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        boot_file_name = CalmVariable.Simple(
            "",
            label="Boot File Name (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )
        tftp_server_name = CalmVariable.Simple(
            "",
            label="TFTP Server Name (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        domain_search_list = CalmVariable.Simple(
            "",
            label="Domain Search List CSV",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter domain search list - <domain1>,<domain2>",
        )
        domain_name = CalmVariable.Simple(
            "",
            label="Domain Name (Optional)",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        domain_name_server_list = CalmVariable.Simple(
            "10.40.64.15,10.40.64.16",
            label="DNS List (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter comma separated dns servers eg <IP>, <IP>",
        )
        dhcp_server_address = CalmVariable.Simple(
            "10.44.19.126",
            label="DHCP Server Address (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        pool_list = CalmVariable.Simple(
            '"10.44.19.66 10.44.19.125"',
            label="IP Pool List (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description='Enter pool list in this format eg."<start_ip> <end_ip>", "<start_ip> <end_ip>" ',
        )
        default_gateway_ip = CalmVariable.Simple(
            "10.44.19.65",
            label="Default Gateway IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        subnet_ip = CalmVariable.Simple(
            "10.44.19.64/26",
            label="Subnet IP Prefix",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter subnet IP with prefix eg 10.10.10.10/24",
        )
        virtual_switch_uuid = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_CreateNutanixIPAMSubnet_variable_virtual_switch_uuid_Task_SampleTask.py",
                ),
            ),
            label="Virtual Switch UUID",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        vlan_id = CalmVariable.Simple(
            "",
            label="VLAN ID",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Enter vlan_id",
        )
        subnet_name = CalmVariable.Simple(
            "",
            label="Subet Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Enter name of subnet",
        )
        pe_cluster_uuid = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_CreateNutanixIPAMSubnet_variable_pe_cluster_uuid_Task_SampleTask.py",
                ),
            ),
            label="PE Cluster UUID",
            is_mandatory=True,
            is_hidden=False,
            description="Please select cluster",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Create Nutanix IPAM",
            filename=os.path.join(
                "scripts",
                "ResourceType_Subnet_Action_CreateNutanixIPAMSubnet_Task_CreateNutanixIPAM.py",
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def Delete(type="resource_type_delete"):
        """Action to delete a subnet"""

        subnet_list = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_Delete_variable_subnet_list_Task_SampleTask.py",
                ),
            ),
            label="",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Delete Subnet",
            filename=os.path.join(
                "scripts", "ResourceType_Subnet_Action_Delete_Task_DeleteSubnet.py"
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def List(type="resource_type_list"):
        """Action to list subnets"""

        length = CalmVariable.Simple.int(
            "50",
            label="",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="The number of records to retrieve relative to the offset",
        )
        sort_order = CalmVariable.WithOptions(
            ["ASCENDING", "DESCENDING"],
            label="",
            default="ASCENDING",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        offset = CalmVariable.Simple.int(
            "0",
            label="",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Offset from the start of the entity list",
        )
        sort_attribute = CalmVariable.Simple(
            "name",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="The attribute to perform sort on",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="subnet_list",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="SubnetList",
            filename=os.path.join(
                "scripts", "ResourceType_Subnet_Action_List_Task_SubnetList.py"
            ),
            variables=["subnet_list"],
        )

    @action
    def CreateExternalIPAMSubnet(
        name="Create External IPAM Subnet", type="resource_type_generic"
    ):
        """Action to create Nutanix IPAM"""

        description = CalmVariable.Simple(
            "",
            label="Description",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="optional",
        )
        enable_nat = CalmVariable.WithOptions(
            ["True", "False"],
            label="Enable NAT?",
            default="True",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Default - True",
        )
        pool_list = CalmVariable.Simple(
            "",
            label="IP Pool List",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description='Enter pool list in this format eg."<start_ip> <space> <end_ip>", "<start_ip> <space><end_ip>" ',
        )
        default_gateway_ip = CalmVariable.Simple(
            "",
            label="Default Gateway IP",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        subnet_ip = CalmVariable.Simple(
            "",
            label="Subnet IP Prefix",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Enter subnet ip with prefix eg 10.10.10.10/24",
        )
        vlan_id = CalmVariable.Simple(
            "",
            label="VLAN ID",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        virtual_switch_uuid = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_CreateExternalIPAMSubnet_variable_virtual_switch_uuid_Task_SampleTask.py",
                ),
            ),
            label="Virtual Switch UUID",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        pe_cluster_uuid = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_CreateExternalIPAMSubnet_variable_pe_cluster_uuid_Task_SampleTask.py",
                ),
            ),
            label="PE Cluster UUID",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        subnet_name = CalmVariable.Simple(
            "",
            label="Subnet Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Create External IPAM Subnet",
            filename=os.path.join(
                "scripts",
                "ResourceType_Subnet_Action_CreateExternalIPAMSubnet_Task_CreateExternalIPAMSubnet.py",
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def CreateOverlaySubnet(name="Create Overlay Subnet", type="resource_type_generic"):
        """Action to create an overlay subnet"""

        description = CalmVariable.Simple(
            "",
            label="Description (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        boot_file_name = CalmVariable.Simple(
            "",
            label="Boot File Name (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        tftp_server_name = CalmVariable.Simple(
            "",
            label="TFTP Server Name (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        domain_search_list = CalmVariable.Simple(
            "",
            label="Domain Search List (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter domain search list - <domain1>,<domain2>",
        )
        domain_name_server_list = CalmVariable.Simple(
            "10.40.64.15,10.40.64.16",
            label="DNS List (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter comma separated dns servers (optional)",
        )
        domain_name = CalmVariable.Simple(
            "",
            label="Domain Name (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Optional",
        )
        pool_list = CalmVariable.Simple(
            "",
            label="IP Pool List(Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description='Enter pool list in this format eg."<start_ip> <end_ip>", "<start_ip> <end_ip>" ',
        )
        default_gateway_ip = CalmVariable.Simple(
            "",
            label="Default Gateway IP",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        subnet_ip = CalmVariable.Simple(
            "",
            label="Subnet IP Prefix",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Enter subnet ip with prefix eg 10.10.10.10/24",
        )
        vpc_uuid = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_CreateOverlaySubnet_variable_vpc_uuid_Task_SampleTask.py",
                ),
            ),
            label="VPC UUID",
            is_mandatory=True,
            is_hidden=False,
            description="",
            regex="^.*$",
            validate_regex=False,
        )
        subnet_name = CalmVariable.Simple(
            "",
            label="Subnet Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Create Overlay Subnet",
            filename=os.path.join(
                "scripts",
                "ResourceType_Subnet_Action_CreateOverlaySubnet_Task_CreateOverlaySubnet.py",
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def Get(type="resource_type_generic"):
        """Action to fetch a subnet"""

        subnet_name = CalmVariable.Simple(
            "",
            label="Subnet Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Enter name or FIQL format to search eg. [.*name.*]",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="subnets",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Get Subnet",
            filename=os.path.join(
                "scripts", "ResourceType_Subnet_Action_Get_Task_GetSubnet.py"
            ),
            variables=["subnets"],
        )

    @action
    def UpdateNutanixIPAMSubnet(
        name="Update Nutanix IPAM Subnet", type="resource_type_generic"
    ):
        """Action to update a Nutanix IPAM subnet"""

        description = CalmVariable.Simple(
            "",
            label="Description (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        boot_file_name = CalmVariable.Simple(
            "",
            label="Boot File Name (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )
        tftp_server_name = CalmVariable.Simple(
            "",
            label="TFTP Server Name (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
        )
        domain_search_list = CalmVariable.Simple(
            "",
            label="Domain Search List (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter domain search list - <domain1>,<domain2>",
        )
        domain_name = CalmVariable.Simple(
            "",
            label="Domain Name (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        domain_name_server_list = CalmVariable.Simple(
            "",
            label="DNS List (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter comma separated dns servers eg <IP>, <IP>",
        )
        dhcp_server_address = CalmVariable.Simple(
            "",
            label="DHCP Server Address (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="DHCP Server Address (Optional)",
        )
        pool_list = CalmVariable.Simple(
            "",
            label="IP Pool List (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description='Enter pool list in this format eg."<start_ip> <end_ip>", "<start_ip> <end_ip>" ',
        )
        default_gateway_ip = CalmVariable.Simple(
            "",
            label="Default Gateway IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="If subnet_ip_prefix entered then please add def gateway ip too.",
        )
        subnet_ip = CalmVariable.Simple(
            "",
            label="Subnet IP Prefix(Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        virtual_switch_uuid = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_UpdateNutanixIPAMSubnet_variable_virtual_switch_uuid_Task_SampleTask.py",
                ),
            ),
            label="Virtual Switch UUID",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        vlan_id = CalmVariable.Simple(
            "",
            label="VLAN ID",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        subnet_name = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_UpdateNutanixIPAMSubnet_variable_subnet_name_Task_SampleTask.py",
                ),
            ),
            label="Subnet Name",
            is_mandatory=False,
            is_hidden=False,
            description="Select subnet to update.",
        )
        pe_cluster_uuid = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_UpdateNutanixIPAMSubnet_variable_pe_cluster_uuid_Task_SampleTask.py",
                ),
            ),
            label="PE Cluster UUID",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Update Nutanix IPAM Subnet",
            filename=os.path.join(
                "scripts",
                "ResourceType_Subnet_Action_UpdateNutanixIPAMSubnet_Task_UpdateNutanixIPAMSubnet.py",
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def UpdateExternalIPAMSubnet(
        name="Update External IPAM Subnet", type="resource_type_generic"
    ):
        """Action to update an external IPAM subnet"""

        description = CalmVariable.Simple(
            "",
            label="Description (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        pool_list = CalmVariable.Simple(
            "",
            label="Add IP Pool List (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description='Enter pool list in this format eg."<start_ip> <space> <end_ip>", "<start_ip> <space><end_ip>" ',
        )
        default_gateway_ip = CalmVariable.Simple(
            "",
            label="Default Gateway IP (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        virtual_switch_uuid = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_UpdateExternalIPAMSubnet_variable_virtual_switch_uuid_Task_SampleTask.py",
                ),
            ),
            label="Virtual Switch UUID",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        subnet_name = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_UpdateExternalIPAMSubnet_variable_subnet_name_Task_SampleTask.py",
                ),
            ),
            label="Subnet Name",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        pe_cluster_uuid = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_UpdateExternalIPAMSubnet_variable_pe_cluster_uuid_Task_SampleTask.py",
                ),
            ),
            label="PE Cluster UUID",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Update External Subnet",
            filename=os.path.join(
                "scripts",
                "ResourceType_Subnet_Action_UpdateExternalIPAMSubnet_Task_UpdateExternalSubnet.py",
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def UpdateOverlaySubnet(name="Update Overlay Subnet", type="resource_type_generic"):
        """Action to update an overlay subnet"""

        description = CalmVariable.Simple(
            "",
            label="Description (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        boot_file_name = CalmVariable.Simple(
            "",
            label="Boot File Name (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        tftp_server_name = CalmVariable.Simple(
            "",
            label="TFTP Server Name (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        domain_search_list = CalmVariable.Simple(
            "",
            label="Domain Search List (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter domain search list - <domain1>,<domain2>",
        )
        domain_name_server_list = CalmVariable.Simple(
            "",
            label="DNS List (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter comma separated dns servers (optional)",
        )
        domain_name = CalmVariable.Simple(
            "",
            label="Domain Name (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        pool_list = CalmVariable.Simple(
            "",
            label="IP Pool List (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description='Enter pool list in this format eg."<start_ip> <space> <end_ip>", "<start_ip> <space><end_ip>" ',
        )
        subnet_name = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_UpdateOverlaySubnet_variable_subnet_name_Task_SampleTask.py",
                ),
            ),
            label="Subnet Name",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        pe_cluster_uuid = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_Subnet_Action_UpdateOverlaySubnet_variable_pe_cluster_uuid_Task_SampleTask.py",
                ),
            ),
            label="PE Cluster UUID",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="update_overlay_subnet",
            filename=os.path.join(
                "scripts",
                "ResourceType_Subnet_Action_UpdateOverlaySubnet_Task_update_overlay_subnet.py",
            ),
            variables=["task_uuid", "task_status"],
        )


class VPC(ResourceType):
    """Resource Type to manage Nutanix Virtual Private Clouds"""

    resource_kind = "Network"

    icon_name = "VPC"

    schemas = []

    variables = []

    @action
    def Create(type="resource_type_create"):
        """Action to create a VPC"""

        Description = CalmVariable.Simple(
            "",
            label="Description",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter Description (optional)",
        )
        common_domain_name_server_ip_list = CalmVariable.Simple(
            "",
            label="DNS IPs (Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter comma separated IP address (optional)",
        )
        externally_routable_prefix_list = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter externally_routable_prefix_list with comma separated e.g 10.10.10.10/24(Optional)",
        )
        external_subnet_reference = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_VPC_Action_Create_variable_external_subnet_reference_Task_SampleTask.py",
                ),
            ),
            label="External Subnet",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        vpc_name = CalmVariable.Simple(
            "",
            label="VPC Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Create VPC",
            filename=os.path.join(
                "scripts", "ResourceType_VPC_Action_Create_Task_CreateVPC.py"
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def Delete(type="resource_type_delete"):
        """Action to delete a VPC"""

        subnet_name = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_VPC_Action_Delete_variable_subnet_name_Task_SampleTask.py",
                ),
            ),
            label="FYI: The following subnets will be deleted. Avoid executing the action if you don't want to delete them",
            is_mandatory=False,
            is_hidden=False,
            description="The below subnet(s) will get deleted automatically, do not select/unselect. \nDo not execute if you don't want to delete them.",
        )
        vpc_name = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_VPC_Action_Delete_variable_vpc_name_Task_SampleTask.py",
                ),
            ),
            label="VPC Name",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="subnet_task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="subnet_task_status",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="vpc_task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="vpc_task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Delete Subnet",
            filename=os.path.join(
                "scripts", "ResourceType_VPC_Action_Delete_Task_DeleteSubnet.py"
            ),
            variables=["subnet_task_uuid", "subnet_task_status"],
        )

        CalmTask.SetVariable.escript.py3(
            name="Delete VPC",
            filename=os.path.join(
                "scripts", "ResourceType_VPC_Action_Delete_Task_DeleteVPC.py"
            ),
            variables=["vpc_task_uuid", "vpc_task_status"],
        )

    @action
    def List(type="resource_type_list"):
        """Action to list VPCs"""

        offset = CalmVariable.Simple.int(
            "0",
            label="",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Offset from the start of the entity list",
        )
        length = CalmVariable.Simple.int(
            "50",
            label="",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="The number of records to retrieve relative to the offset",
        )
        sort_order = CalmVariable.WithOptions(
            ["ASCENDING", "DESCENDING"],
            label="",
            default="ASCENDING",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        sort_attribute = CalmVariable.Simple(
            "name",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="The attribute to perform sort on",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="vpc_list",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="List VPCs",
            filename=os.path.join(
                "scripts", "ResourceType_VPC_Action_List_Task_ListVPCs.py"
            ),
            variables=["vpc_list"],
        )

    @action
    def Update(type="resource_type_generic"):
        """Action to update a VPC"""

        Description = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        common_domain_name_server_ip_list = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        externally_routable_prefix_list = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enter externally_routable_prefix_list with comma separated e.g 10.10.10.10/24 (Optional)",
        )
        external_subnet_reference = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_VPC_Action_Update_variable_external_subnet_reference_Task_SampleTask.py",
                ),
            ),
            label="External Subnet",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        vpc_name = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_VPC_Action_Update_variable_vpc_name_Task_SampleTask.py",
                ),
            ),
            label="VPC name",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Update VPC",
            filename=os.path.join(
                "scripts", "ResourceType_VPC_Action_Update_Task_UpdateVPC.py"
            ),
            variables=["task_uuid", "task_status"],
        )


class SecurityPolicies(ResourceType):
    """A Network Security Policy is a set of rules configured to protect entities across the network. You can use these APIs to create different types of policies such as Application, Isolation, and Quarantine with Inbound/Outbound as categories, IP Addresses or ranges, CIDR blocks, subnets and/or Address Groups/Service Groups."""

    name = "Security Policies"

    resource_kind = "Network"

    icon_name = "FlowPolicies"

    schemas = []

    variables = [
        CalmVariable.Simple(
            "v4.0.b1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="flow_api_version",
        ),
        CalmVariable.Simple(
            "v4.0.b1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="prism_api_version",
        ),
    ]

    @action
    def CreateIsolationPolicy(
        name="Create Isolation Policy", type="resource_type_create"
    ):

        vpcReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateIsolationPolicy_variable_vpcReferences_Task_SampleTask.py",
                ),
            ),
            label="VPC References",
            is_mandatory=False,
            is_hidden=False,
            description="Select vpc values If scope is selected as VPC_LIST",
        )
        isHitlogEnabled = CalmVariable.WithOptions(
            ["False", "True"],
            label="Is Hitlog Enabled",
            default="False",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        isIpv6TrafficAllowed = CalmVariable.WithOptions(
            ["False", "True"],
            label="Is Ipv6 Traffic Allowed",
            default="False",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        scope = CalmVariable.WithOptions(
            ["ALL_VLAN", "VPC_LIST"],
            label="Scope",
            default="ALL_VLAN",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="ALL_VLAN : Policy is scoped to all the VLANs.\nVPC_LIST : Policy is scoped to the list of VPCs specified in vpcReferences",
        )
        secondIsolationGroup = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateIsolationPolicy_variable_secondIsolationGroup_Task_SampleTask.py",
                ),
            ),
            label="Second Isolation Group",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        firstIsolationGroup = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateIsolationPolicy_variable_firstIsolationGroup_Task_SampleTask.py",
                ),
            ),
            label="First Isolation Group",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        policy_state = CalmVariable.WithOptions(
            ["SAVE", "MONITOR", "ENFORCE"],
            label="",
            default="SAVE",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        description = CalmVariable.Simple(
            "",
            label="Description(Optional)",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        policy_name = CalmVariable.Simple(
            "",
            label="Enter Isolation Policy Name",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )

        CalmTask.SetVariable.escript.py3(
            name="create_isolation_policy",
            filename=os.path.join(
                "scripts",
                "ResourceType_SecurityPolicies_Action_CreateIsolationPolicy_Task_create_isolation_policy.py",
            ),
            variables=["task_uuid"],
        )

    @action
    def Delete(type="resource_type_delete"):

        policy_name = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_Delete_variable_policy_name_Task_SampleTask.py",
                ),
            ),
            label="Select policy to delete",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )

        CalmTask.SetVariable.escript.py3(
            name="Delete",
            filename=os.path.join(
                "scripts", "ResourceType_SecurityPolicies_Action_Delete_Task_Delete.py"
            ),
            variables=["task_uuid"],
        )

    @action
    def List(type="resource_type_list"):

        orderby = CalmVariable.Simple(
            "",
            label="Order By",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, '$orderby=templateName desc' would get all templates sorted by templateName in descending order",
        )
        filter = CalmVariable.Simple(
            "",
            label="Filter",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions. For example, filter '$filter=name eq 'karbon-ntnx-1.0' would filter the result on cluster name 'karbon-ntnx1.0', filter '$filter=startswith(name, 'C')' would filter on cluster name starting with 'C'.",
        )
        select = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        limit = CalmVariable.Simple.int(
            "50",
            label="Limit",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.",
        )
        page = CalmVariable.Simple.int(
            "0",
            label="Page",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.\n\n",
        )

        CalmTask.SetVariable.escript.py3(
            name="List",
            filename=os.path.join(
                "scripts", "ResourceType_SecurityPolicies_Action_List_Task_List.py"
            ),
            variables=["list_security_policies"],
        )

    @action
    def Get(type="resource_type_generic"):

        extId = CalmVariable.Simple(
            "",
            label="ExtId",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )

        CalmTask.SetVariable.escript.py3(
            name="Get",
            filename=os.path.join(
                "scripts", "ResourceType_SecurityPolicies_Action_Get_Task_Get.py"
            ),
            variables=["get_policies"],
        )

    @action
    def CreateApplicationPolicyGeneric(
        name="Create Application Policy Generic", type="resource_type_generic"
    ):

        vpcReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateApplicationPolicyGeneric_variable_vpcReferences_Task_SampleTask.py",
                ),
            ),
            label="Select VPC Reference",
            is_mandatory=False,
            is_hidden=False,
            description="Select vpc when scope selected as VPC_LIST",
        )
        dest_serviceGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateApplicationPolicyGeneric_variable_dest_serviceGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="3.9 Destination ServiceGroup References",
            is_mandatory=False,
            is_hidden=False,
            description="This is a protocol type along with TCP, UDP, ICMP and will be added for w.r.t source selected",
        )
        dest_AllGroupProtocolType = CalmVariable.Simple(
            "",
            label="3.9 All Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        dest_AddressProtocolType = CalmVariable.Simple(
            "",
            label="3.7. Address Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        dest_SubnetProtocolType = CalmVariable.Simple(
            "",
            label="3.6. Subnet Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        dest_CategoryProtocolType = CalmVariable.Simple(
            "",
            label="3.5 Category Destination Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        destAllGroupType = CalmVariable.WithOptions(
            ["No", "ALL"],
            label="3.4 Destination AllGroupT ype",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        destAddressGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateApplicationPolicyGeneric_variable_destAddressGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="3.3 Destination Address Group References",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        destSubnet = CalmVariable.Simple(
            "",
            label="3.2 Destination Subnet",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        destCategoryReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateApplicationPolicyGeneric_variable_destCategoryReferences_Task_SampleTask.py",
                ),
            ),
            label="3.1 Destination Category References",
            is_mandatory=False,
            is_hidden=False,
            description="List of categories that define a set of network endpoints as outbound.",
        )
        src_serviceGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateApplicationPolicyGeneric_variable_src_serviceGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="2.9 Source ServiceGroup References",
            is_mandatory=False,
            is_hidden=False,
            description="This is a protocol type along with TCP, UDP, ICMP and will be added for w.r.t source selected",
        )
        src_AllGroupProtocolType = CalmVariable.Simple(
            "",
            label="2.8 All Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        src_AddressProtocolType = CalmVariable.Simple(
            "",
            label="2.6. Address Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        src_SubnetProtocolType = CalmVariable.Simple(
            "",
            label="2.7. Subnet Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        src_CategoryProtocolType = CalmVariable.Simple(
            "",
            label="2.5. Category Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        srcAllGroupType = CalmVariable.WithOptions(
            ["No", "ALL"],
            label="2.4 Source AllGroupType",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        srcAddressGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateApplicationPolicyGeneric_variable_srcAddressGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="2.3 Source AddressGroup References",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        srcSubnet = CalmVariable.Simple(
            "",
            label="2.2 Source Subnet",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="ev IP/prefix",
        )
        srcCategoryReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateApplicationPolicyGeneric_variable_srcCategoryReferences_Task_SampleTask.py",
                ),
            ),
            label="2..1 Source Category References",
            is_mandatory=False,
            is_hidden=False,
            description="List of categories that define a set of network endpoints as inbound",
        )
        intra_groupAction = CalmVariable.WithOptions(
            ["ALLOW", "DENY"],
            label="1.1 Internal Entity Group Action",
            default="ALLOW",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Traffic between Intra(secured) Entity Groups.",
        )
        securedGroup = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateApplicationPolicyGeneric_variable_securedGroup_Task_SampleTask.py",
                ),
            ),
            label="1. Select Secured Group",
            is_mandatory=True,
            is_hidden=False,
            description="Select Secured Group to apply policy and a rule for specifying allowed traffic inside of a secured entity group.\nDo not select existing secured group.",
        )
        isHitlogEnabled = CalmVariable.WithOptions(
            ["False", "True"],
            label="Is Hitlog Enabled",
            default="False",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        isIpv6TrafficAllowed = CalmVariable.WithOptions(
            ["False", "True"],
            label="Is Ipv6 Traffic Allowed",
            default="False",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        scope = CalmVariable.WithOptions(
            ["ALL_VLAN", "VPC_LIST"],
            label="Scope",
            default="ALL_VLAN",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="ALL_VLAN : Policy is scoped to all the VLANs.\nVPC_LIST : Policy is scoped to the list of VPCs specified in vpcReferences",
        )
        policy_state = CalmVariable.WithOptions(
            ["SAVE", "MONITOR", "ENFORCE"],
            label="",
            default="SAVE",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        description = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        policy_name = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )

        CalmTask.SetVariable.escript.py3(
            name="Create Application Policy",
            filename=os.path.join(
                "scripts",
                "ResourceType_SecurityPolicies_Action_CreateApplicationPolicyGeneric_Task_CreateApplicationPolicy.py",
            ),
            variables=["task_uuid"],
        )

    @action
    def UpdateIsolationPolicy(
        name="Update Isolation Policy", type="resource_type_generic"
    ):

        vpcReferences = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateIsolationPolicy_variable_vpcReferences_Task_SampleTask.py",
                ),
            ),
            label="VPC References",
            is_mandatory=False,
            is_hidden=False,
            description="Select vpc values If scope is selected as VPC_LIST",
        )
        isHitlogEnabled = CalmVariable.WithOptions(
            ["False", "True"],
            label="",
            default="False",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        isIpv6TrafficAllowed = CalmVariable.WithOptions(
            ["False", "True"],
            label="",
            default="False",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        scope = CalmVariable.WithOptions(
            ["ALL_VLAN", "VPC_LIST"],
            label="Scope",
            default="ALL_VLAN",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="ALL_VLAN : Policy is scoped to all the VLANs.\nVPC_LIST : Policy is scoped to the list of VPCs specified in vpcReferences",
        )
        secondIsolationGroup = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateIsolationPolicy_variable_secondIsolationGroup_Task_SampleTask.py",
                ),
            ),
            label="Second Isolation Group",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        firstIsolationGroup = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateIsolationPolicy_variable_firstIsolationGroup_Task_SampleTask.py",
                ),
            ),
            label="",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        policy_state = CalmVariable.WithOptions(
            ["SAVE", "MONITOR", "ENFORCE"],
            label="",
            default="SAVE",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        description = CalmVariable.Simple(
            "",
            label="Description",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        policy_new_name = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        policy_name = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateIsolationPolicy_variable_policy_name_Task_SampleTask.py",
                ),
            ),
            label="Select Policy Name to Update",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )

        CalmTask.SetVariable.escript.py3(
            name="update_isolation_policy",
            filename=os.path.join(
                "scripts",
                "ResourceType_SecurityPolicies_Action_UpdateIsolationPolicy_Task_update_isolation_policy.py",
            ),
            variables=["task_uuid"],
        )

    @action
    def UpdateApplicationPolicy(
        name="Update Application Policy", type="resource_type_generic"
    ):

        vpcReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateApplicationPolicy_variable_vpcReferences_Task_SampleTask.py",
                ),
            ),
            label="Select VPC Reference",
            is_mandatory=False,
            is_hidden=False,
            description="Select VPC when scope selected as VPC_LIST",
        )
        dest_serviceGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateApplicationPolicy_variable_dest_serviceGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="3.9 Destination ServiceGroup References",
            is_mandatory=False,
            is_hidden=False,
            description="This is a protocol type along with TCP, UDP, ICMP and will be added for w.r.t source selected",
        )
        dest_AllGroupProtocolType = CalmVariable.Simple(
            "",
            label="3.8 All Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        dest_AddressProtocolType = CalmVariable.Simple(
            "",
            label="3.7. Address Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        dest_SubnetProtocolType = CalmVariable.Simple(
            "",
            label="3.6. Subnet Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        dest_CategoryProtocolType = CalmVariable.Simple(
            "",
            label="3.5 Category Destination Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        destAllGroupType = CalmVariable.WithOptions(
            ["No", "ALL"],
            label="3.4 Destination AllGroupT ype",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        destAddressGroupReferences = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateApplicationPolicy_variable_destAddressGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="3.3 Destination Address Group References",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        destSubnet = CalmVariable.Simple(
            "",
            label="3.2 Destination Subnet",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        destCategoryReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateApplicationPolicy_variable_destCategoryReferences_Task_SampleTask.py",
                ),
            ),
            label="3.1 Destination Category References",
            is_mandatory=False,
            is_hidden=False,
            description="List of categories that define a set of network endpoints as outbound.",
        )
        src_serviceGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateApplicationPolicy_variable_src_serviceGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="2.9 Source ServiceGroup References",
            is_mandatory=False,
            is_hidden=False,
            description="This is a protocol type along with TCP, UDP, ICMP and will be added for w.r.t source selected",
        )
        src_AllGroupProtocolType = CalmVariable.Simple(
            "",
            label="2.8 All Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        src_SubnetProtocolType = CalmVariable.Simple(
            "",
            label="2.7. Subnet Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        src_AddressProtocolType = CalmVariable.Simple(
            "",
            label="2.6. Address Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        src_CategoryProtocolType = CalmVariable.Simple(
            "",
            label="2.5. Category Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        srcAllGroupType = CalmVariable.WithOptions(
            ["No", "ALL"],
            label="2.4 Source AllGroupType",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        srcAddressGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateApplicationPolicy_variable_srcAddressGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="2.3 Source AddressGroup Reference",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        srcSubnet = CalmVariable.Simple(
            "",
            label="2.2 Source Subnet",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="eg. IP/prefix",
        )
        srcCategoryReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateApplicationPolicy_variable_srcCategoryReferences_Task_SampleTask.py",
                ),
            ),
            label="2..1 Source Category References",
            is_mandatory=False,
            is_hidden=False,
            description="List of categories that define a set of network endpoints as inbound",
        )
        intra_groupAction = CalmVariable.WithOptions(
            ["ALLOW", "DENY"],
            label="1.1 Internal Entity Group Action",
            default="ALLOW",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Traffic between Intra(secured) Entity Groups.",
        )
        securedGroup = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateApplicationPolicy_variable_securedGroup_Task_SampleTask.py",
                ),
            ),
            label="1. Select Secured Group",
            is_mandatory=True,
            is_hidden=False,
            description="Select Secured Group to apply policy and a rule for specifying allowed traffic inside of a secured entity group.\nDo not select existing secured group.",
        )
        isHitlogEnabled = CalmVariable.WithOptions(
            ["False", "True"],
            label="",
            default="False",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        isIpv6TrafficAllowed = CalmVariable.WithOptions(
            ["False", "True"],
            label="",
            default="False",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        scope = CalmVariable.WithOptions(
            ["ALL_VLAN", "VPC_LIST"],
            label="",
            default="ALL_VLAN",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        policy_state = CalmVariable.WithOptions(
            ["SAVE", "MONITOR", "ENFORCE"],
            label="",
            default="SAVE",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        description = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        policy_new_name = CalmVariable.Simple(
            "",
            label="New Policy Name",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        policy_name = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateApplicationPolicy_variable_policy_name_Task_SampleTask.py",
                ),
            ),
            label="Select policy to update",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )

        CalmTask.SetVariable.escript.py3(
            name="Update Application Policy",
            filename=os.path.join(
                "scripts",
                "ResourceType_SecurityPolicies_Action_UpdateApplicationPolicy_Task_UpdateApplicationPolicy.py",
            ),
            variables=["task_uuid"],
        )

    @action
    def UpdateQuarantineForensicPolicy(
        name="Update Quarantine Forensic Policy", type="resource_type_generic"
    ):

        dest_serviceGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateQuarantineForensicPolicy_variable_dest_serviceGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="3.9 Destination ServiceGroup References",
            is_mandatory=False,
            is_hidden=False,
            description="This is a protocol type along with TCP, UDP, ICMP and will be added for w.r.t source selected",
        )
        dest_AllGroupProtocolType = CalmVariable.Simple(
            "",
            label="3.8 All Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        dest_AddressProtocolType = CalmVariable.Simple(
            "",
            label="3.7. Address Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        dest_SubnetProtocolType = CalmVariable.Simple(
            "",
            label="3.6. Subnet Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        dest_CategoryProtocolType = CalmVariable.Simple(
            "",
            label="3.5 Category Destination Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        destAllGroupType = CalmVariable.WithOptions(
            ["No", "ALL"],
            label="",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        destAddressGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateQuarantineForensicPolicy_variable_destAddressGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="3.3 Destination Address Group References",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        destSubnet = CalmVariable.Simple(
            "",
            label="3.2 Destination Subnet",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        destCategoryReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateQuarantineForensicPolicy_variable_destCategoryReferences_Task_SampleTask.py",
                ),
            ),
            label="3.1 Destination Category References",
            is_mandatory=False,
            is_hidden=False,
            description="List of categories that define a set of network endpoints as outbound.",
        )
        src_serviceGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateQuarantineForensicPolicy_variable_src_serviceGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="2.9 Source ServiceGroup References",
            is_mandatory=False,
            is_hidden=False,
            description="This is a protocol type along with TCP, UDP, ICMP and will be added for w.r.t source selected",
        )
        src_AllGroupProtocolType = CalmVariable.Simple(
            "",
            label="2.8 All Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        src_SubnetProtocolType = CalmVariable.Simple(
            "",
            label="2.7. Subnet Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        src_AddressProtocolType = CalmVariable.Simple(
            "",
            label="2.6. Address Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        src_CategoryProtocolType = CalmVariable.Simple(
            "",
            label="2.5. Category Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        srcAllGroupType = CalmVariable.WithOptions(
            ["No", "ALL"],
            label="2.4 Source AllGroupType",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        srcAddressGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateQuarantineForensicPolicy_variable_srcAddressGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="2.3 Source AddressGroup Reference",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        srcSubnet = CalmVariable.Simple(
            "",
            label="2.2 Source Subnet",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="eg. IP/prefix",
        )
        srcCategoryReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateQuarantineForensicPolicy_variable_srcCategoryReferences_Task_SampleTask.py",
                ),
            ),
            label="2..1 Source Category References",
            is_mandatory=False,
            is_hidden=False,
            description="List of categories that define a set of network endpoints as inbound",
        )
        isHitlogEnabled = CalmVariable.WithOptions(
            ["False", "True"],
            label="",
            default="False",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        isIpv6TrafficAllowed = CalmVariable.WithOptions(
            ["False", "True"],
            label="",
            default="False",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        policy_state = CalmVariable.WithOptions(
            ["SAVE", "MONITOR", "ENFORCE"],
            label="",
            default="SAVE",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        policy_name = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_UpdateQuarantineForensicPolicy_variable_policy_name_Task_SampleTask.py",
                ),
            ),
            label="Select policy to update",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )

        CalmTask.SetVariable.escript.py3(
            name="update quarantine forensic policy",
            filename=os.path.join(
                "scripts",
                "ResourceType_SecurityPolicies_Action_UpdateQuarantineForensicPolicy_Task_updatequarantineforensicpolicy.py",
            ),
            variables=["task_uuid"],
        )

    @action
    def CreateVDIPolicy(name="Create VDI Policy", type="resource_type_generic"):

        vpcReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateVDIPolicy_variable_vpcReferences_Task_SampleTask.py",
                ),
            ),
            label="",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        dest_serviceGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateVDIPolicy_variable_dest_serviceGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="3.9 Destination ServiceGroup References",
            is_mandatory=False,
            is_hidden=False,
            description="This is a protocol type along with TCP, UDP, ICMP and will be added for w.r.t source selected",
        )
        dest_AllGroupProtocolType = CalmVariable.Simple(
            "",
            label="3.9 All Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        dest_AddressProtocolType = CalmVariable.Simple(
            "",
            label="3.7. Address Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        dest_SubnetProtocolType = CalmVariable.Simple(
            "",
            label="3.6. Subnet Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        dest_CategoryProtocolType = CalmVariable.Simple(
            "",
            label="33.5 Category Destination Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        destAllGroupType = CalmVariable.WithOptions(
            ["No", "ALL"],
            label="",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        destAddressGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateVDIPolicy_variable_destAddressGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="3.3 Destination Address Group References",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        destSubnet = CalmVariable.Simple(
            "",
            label="3.2 Destination Subnet",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        destCategoryReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateVDIPolicy_variable_destCategoryReferences_Task_SampleTask.py",
                ),
            ),
            label="3.1 Destination Category References",
            is_mandatory=False,
            is_hidden=False,
            description="List of categories that define a set of network endpoints as outbound.",
        )
        src_serviceGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateVDIPolicy_variable_src_serviceGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="2.9 Source ServiceGroup References",
            is_mandatory=False,
            is_hidden=False,
            description="This is a protocol type along with TCP, UDP, ICMP and will be added for w.r.t source selected",
        )
        src_AllGroupProtocolType = CalmVariable.Simple(
            "",
            label="2.8 All Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        src_AddressProtocolType = CalmVariable.Simple(
            "",
            label="2.6. Address Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        src_SubnetProtocolType = CalmVariable.Simple(
            "",
            label="2.7. Subnet Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        src_CategoryProtocolType = CalmVariable.Simple(
            "",
            label="2.5. Category Source Protocol Type with values",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="<protocol_type> : <port> , <port> ; ..\neg. TCP:22,22-25; UDP:22,22-25; ICMP:ANY,ANY or ANY,PORT or PORT,ANY or PORT,PORT",
        )
        srcAllGroupType = CalmVariable.WithOptions(
            ["No", "ALL"],
            label="2.4 Source AllGroupType",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        srcAddressGroupReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateVDIPolicy_variable_srcAddressGroupReferences_Task_SampleTask.py",
                ),
            ),
            label="2.3 Source AddressGroup References",
            is_mandatory=False,
            is_hidden=False,
            description="",
        )
        srcSubnet = CalmVariable.Simple(
            "",
            label="2.2 Source Subnet",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="eg IP/prefix",
        )
        srcCategoryReferences = CalmVariable.WithOptions.FromTask.Array(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_SecurityPolicies_Action_CreateVDIPolicy_variable_srcCategoryReferences_Task_SampleTask.py",
                ),
            ),
            label="2.1 Source Category References",
            is_mandatory=False,
            is_hidden=False,
            description="List of categories that define a set of network endpoints as inbound",
        )
        intra_groupAction = CalmVariable.WithOptions(
            ["ALLOW", "DENY"],
            label="1.2 Internal Entity Group Action",
            default="ALLOW",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        securedGroup = CalmVariable.Simple(
            "ADGroup:$Default",
            label="1.1 Secured AD Group",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Default AD Group. Do not change",
        )
        isHitlogEnabled = CalmVariable.WithOptions(
            ["False", "True"],
            label="",
            default="False",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        isIpv6TrafficAllowed = CalmVariable.WithOptions(
            ["False", "True"],
            label="",
            default="False",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        scope = CalmVariable.WithOptions(
            ["ALL_VLAN", "VPC_LIST"],
            label="",
            default="ALL_VLAN",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        policy_state = CalmVariable.WithOptions(
            ["SAVE", "MONITOR", "ENFORCE"],
            label="",
            default="SAVE",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        description = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        policy_name = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="VDI policy is for only reference purpose, not tested.",
        )

        CalmTask.SetVariable.escript.py3(
            name="Create VDI policy",
            filename=os.path.join(
                "scripts",
                "ResourceType_SecurityPolicies_Action_CreateVDIPolicy_Task_CreateVDIpolicy.py",
            ),
            variables=["task_uuid"],
        )


class VirtualNetworkPolicies(ResourceType):
    """The Network Controller uses policy based routing on VPC networks. A Routing Policy belongs to a VPC and is described by one or more match rules and actions."""

    name = "Virtual Network Policies"

    resource_kind = "Network"

    icon_name = "FlowPolicies"

    schemas = []

    variables = [
        CalmVariable.Simple(
            "v4.0.b1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="flow_virtual_network_api_version",
        ),
        CalmVariable.Simple(
            "v4.0.b1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="prism_api_version",
        ),
    ]

    @action
    def Create(type="resource_type_create"):

        description = CalmVariable.Simple(
            "",
            label="Policy Description",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        rerouteFallbackAction = CalmVariable.WithOptions(
            ["PASSTHROUGH", "NO_ACTION", "ALLOW", "DROP"],
            label="Reroute Fallback Action",
            default="PASSTHROUGH",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Type of fallback action in reroute case when service VM is down.",
        )
        forwardIp = CalmVariable.Simple(
            "",
            label="Forward IP address",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="if ActionType = FORWARD",
        )
        serviceIp = CalmVariable.Simple(
            "",
            label="Service IP ",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="If separate_reroute selected NO then enter service IP.",
        )
        ingressServiceIp = CalmVariable.Simple(
            "",
            label="Ingress Service IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="if separate_reroute = YES then Enter ingressServiceIp",
        )
        egressServiceIp = CalmVariable.Simple(
            "",
            label="Egress Service IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="If separate_reroute = YES then select egressServiceIp",
        )
        separate_reroute = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Separate Reroute",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Select YES If the policy action type = REROUTE and require separate ingress and egress reroute IPs.",
        )
        isBidirectional = CalmVariable.WithOptions(
            ["No", "Yes"],
            label="Bidirectional",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Default: false\nIf True, policies in the reverse direction will be installed with the same action but source and destination will be swapped",
        )
        actionType = CalmVariable.WithOptions(
            ["PERMIT", "DENY", "REROUTE", "FORWARD"],
            label="Action Type",
            default="PERMIT",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        ICMP_DATA = CalmVariable.Simple(
            "",
            label="Enter ICMP details",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="if protocol type in ICMP then enter icmp type and icmp code.  \neg ANY or  icmptype_no : [ ANY | icmpcode_no ]",
        )
        protocolNumber = CalmVariable.Simple.int(
            "",
            label="Enter Protocol Number",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Add only If protocolType selected as protocolNumber,",
        )
        TCP_UDP_DATA = CalmVariable.Simple(
            "",
            label="Enter TCP or UDP Port range",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="If protocol type TCP or UDP. StartPort : EndPort \neg. ANY:ANY or ANY:EndPortRange or StartPortRange:ANY",
        )
        protocolType = CalmVariable.WithOptions(
            ["ANY", "PROTOCOL_NUMBER", "TCP", "UDP", "ICMP"],
            label="Select Protocol Type",
            default="ANY",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Routing Policy Protocol Type.",
        )
        destination_subnet_ip = CalmVariable.Simple(
            "",
            label="Destination Subnet IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="If destination_addressType selected as CUSTOM",
        )
        source_subnet_ip = CalmVariable.Simple(
            "",
            label="Source Subnet IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="If source_addressType selected as CUSTOM",
        )
        destination_addressType = CalmVariable.WithOptions(
            ["ANY", "EXTERNAL", "CUSTOM"],
            label="Destination Address Type",
            default="ANY",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        source_addressType = CalmVariable.WithOptions(
            ["ANY", "EXTERNAL", "CUSTOM"],
            label="Source Address Type",
            default="ANY",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        vpcExtId = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_VirtualNetworkPolicies_Action_Create_variable_vpcExtId_Task_SampleTask.py",
                ),
            ),
            label="Select VPC",
            is_mandatory=True,
            is_hidden=False,
            description="Routing policy will be created for selected VPC.",
        )
        policy_name = CalmVariable.Simple(
            "",
            label="Policy Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        priority = CalmVariable.Simple.int(
            "",
            label="Priority",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="integer <int16> [ 1 .. 1000 ]",
        )

        CalmTask.SetVariable.escript.py3(
            name="Create",
            filename=os.path.join(
                "scripts",
                "ResourceType_VirtualNetworkPolicies_Action_Create_Task_Create.py",
            ),
            variables=["task_uuid"],
        )

    @action
    def Delete(type="resource_type_delete"):

        delete_policy = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_VirtualNetworkPolicies_Action_Delete_variable_delete_policy_Task_SampleTask.py",
                ),
            ),
            label="Select routing policy to delete",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )

        CalmTask.SetVariable.escript.py3(
            name="Delete",
            filename=os.path.join(
                "scripts",
                "ResourceType_VirtualNetworkPolicies_Action_Delete_Task_Delete.py",
            ),
            variables=["task_uuid"],
        )

    @action
    def List(type="resource_type_list"):

        orderby = CalmVariable.Simple(
            "",
            label="Orderby",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, '$orderby=templateName desc' would get all templates sorted by templateName in descending order.",
        )
        filter = CalmVariable.Simple(
            "",
            label="Filter",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="    \nstring\nA URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions. For example, filter '$filter=name eq 'karbon-ntnx-1.0' would filter the result on cluster name 'karbon-ntnx1.0', filter '$filter=startswith(name, 'C')' would filter on cluster name starting with 'C'.",
        )
        select = CalmVariable.Simple(
            "",
            label="Select",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the OData V4.01 URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned",
        )
        limit = CalmVariable.Simple.int(
            "50",
            label="Limit",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Default: 50\nA URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.",
        )
        page = CalmVariable.Simple.int(
            "0",
            label="Page",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Default: 0\nA URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.",
        )

        CalmTask.SetVariable.escript.py3(
            name="List policies",
            filename=os.path.join(
                "scripts",
                "ResourceType_VirtualNetworkPolicies_Action_List_Task_Listpolicies.py",
            ),
            variables=["list_policies"],
        )

    @action
    def Get(type="resource_type_generic"):

        extId = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )

        CalmTask.SetVariable.escript.py3(
            name="Get",
            filename=os.path.join(
                "scripts", "ResourceType_VirtualNetworkPolicies_Action_Get_Task_Get.py"
            ),
            variables=["get_policies"],
        )

    @action
    def Update(type="resource_type_generic"):

        description = CalmVariable.Simple(
            "",
            label="Policy Description",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        rerouteFallbackAction = CalmVariable.WithOptions(
            ["PASSTHROUGH", "NO_ACTION", "ALLOW", "DROP"],
            label="Reroute Fallback Action",
            default="PASSTHROUGH",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Type of fallback action in reroute case when service VM is down.",
        )
        forwardIp = CalmVariable.Simple(
            "",
            label="Forward IP address",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="if ActionType = FORWARD",
        )
        serviceIp = CalmVariable.Simple(
            "",
            label="Service IP ",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="If separate_reroute selected NO then enter service IP.",
        )
        ingressServiceIp = CalmVariable.Simple(
            "",
            label="Ingress Service IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="if separate_reroute = YES then Enter ingressServiceIp",
        )
        egressServiceIp = CalmVariable.Simple(
            "",
            label="Egress Service IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="If separate_reroute = YES then select egressServiceIp",
        )
        separate_reroute = CalmVariable.WithOptions(
            ["No", "Yes"],
            label="Separate Reroute",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Select YES If the policy action type = REROUTE and require separate ingress and egress reroute IPs.",
        )
        isBidirectional = CalmVariable.WithOptions(
            ["No", "Yes"],
            label="Bidirectional",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Default: false\nIf True, policies in the reverse direction will be installed with the same action but source and destination will be swapped",
        )
        actionType = CalmVariable.WithOptions(
            ["PERMIT", "DENY", "REROUTE", "FORWARD"],
            label="Action Type",
            default="PERMIT",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Imp:- You can not change existing actionType for update activity.",
        )
        ICMP_DATA = CalmVariable.Simple(
            "",
            label="Enter ICMP details",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="if protocol type in ICMP then enter icmp type and icmp code.  \neg ANY or  icmptype_no : [ ANY | icmpcode_no ]",
        )
        protocolNumber = CalmVariable.Simple(
            "",
            label="Enter Protocol Number",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Add only If protocolType selected as protocolNumber,",
        )
        TCP_UDP_DATA = CalmVariable.Simple(
            "",
            label="Enter TCP or UDP Port range",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="If protocol type TCP or UDP. \neg. ANY:ANY or ANY:EndPortRange or StartPortRange:ANY",
        )
        protocolType = CalmVariable.WithOptions(
            ["ANY", "PROTOCOL_NUMBER", "TCP", "UDP", "ICMP"],
            label="Select Protocol Type",
            default="ANY",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Routing Policy Protocol Type.",
        )
        destination_subnet_ip = CalmVariable.Simple(
            "",
            label="Destination Subnet IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="If destination_addressType selected as CUSTOM",
        )
        source_subnet_ip = CalmVariable.Simple(
            "",
            label="Source Subnet IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="If source_addressType selected as CUSTOM",
        )
        destination_addressType = CalmVariable.WithOptions(
            ["ANY", "EXTERNAL", "CUSTOM"],
            label="",
            default="ANY",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        source_addressType = CalmVariable.WithOptions(
            ["ANY", "EXTERNAL", "CUSTOM"],
            label="",
            default="ANY",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        policy_name = CalmVariable.Simple(
            "",
            label="Policy Name",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        vpcname = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_VirtualNetworkPolicies_Action_Update_variable_vpcname_Task_SampleTask.py",
                ),
            ),
            label="Select Policy to update",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        priority = CalmVariable.Simple.int(
            "",
            label="Priority",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )

        CalmTask.SetVariable.escript.py3(
            name="Update",
            filename=os.path.join(
                "scripts",
                "ResourceType_VirtualNetworkPolicies_Action_Update_Task_Update.py",
            ),
            variables=["task_uuid"],
        )

    @action
    def ClearCounter(name="Clear Counter", type="resource_type_generic"):

        clear_counter = CalmVariable.WithOptions.FromTask(
            CalmVarTask.Exec.escript.py3(
                name="",
                filename=os.path.join(
                    "scripts",
                    "ResourceType_VirtualNetworkPolicies_Action_ClearCounter_variable_clear_counter_Task_SampleTask.py",
                ),
            ),
            label="",
            is_mandatory=True,
            is_hidden=False,
            description="",
        )
        select_all_policies = CalmVariable.WithOptions(
            ["No", "Yes"],
            label="Do you want to clear counter for all the policies under vpc.",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )

        CalmTask.SetVariable.escript.py3(
            name="Clear_Counter",
            filename=os.path.join(
                "scripts",
                "ResourceType_VirtualNetworkPolicies_Action_ClearCounter_Task_Clear_Counter.py",
            ),
            variables=["task_uuid"],
        )


class FileServer(ResourceType):
    """Resource Type to manage Nutanix File Servers. Built using new V4 APIs.

    API version that start with prefix "a" are experimental and not meant for production use"""

    name = "File Server"

    resource_kind = "Storage"

    icon_name = "FileServer"

    schemas = []

    variables = [
        CalmVariable.Simple(
            "v4.0.b1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="prism_api_version",
        ),
        CalmVariable.Simple(
            "v4.0.b2",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="cluster_mgt_api_version",
        ),
        CalmVariable.Simple(
            "v4.0.b1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="networking_api_version",
        ),
        CalmVariable.Simple(
            "v4.0.a5",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="files_api_version",
        ),
    ]

    @action
    def Create(type="resource_type_create"):

        dns_servers = CalmVariable.Simple(
            "",
            label="DNS servers",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="List of DNS servers associated with the file server, accepts comma seperated values",
        )
        ntp_servers = CalmVariable.Simple(
            "",
            label="NTP servers",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The list of IP or FQDN of the NTP servers associated with the file server, accepts comma separated values",
        )
        vm_count = CalmVariable.Simple.int(
            "1",
            label="VM Count",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Total number of file server VMs. This cannot exceed the number of available CVMs in the associated cluster.\n",
        )
        type_of_deployment = CalmVariable.Simple(
            "",
            label="Deployment type",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description='File server deployment type\n\nEnum    Description\n"PRISM_CENTRAL"    File server is deployed from prism central.\n"PRISM_ELEMENT"    File server is deployed from prism element.\n',
        )
        internal_network_vlan = CalmVariable.Simple(
            "",
            label="Internal network VLAN ",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="File server network VLAN.",
        )
        internal_network_subnet_mask = CalmVariable.Simple(
            "",
            label="Internal network subnet mask",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        internal_network_default_gateway = CalmVariable.Simple(
            "",
            label="Internal network default gateway",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        internal_network_ip_address = CalmVariable.Simple(
            "",
            label="Internal network ip address",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        external_network_vlan = CalmVariable.Simple(
            "",
            label="External network VLAN ",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="File server network VLAN.",
        )
        external_network_subnet_mask = CalmVariable.Simple(
            "",
            label="External network subnet mask",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        external_network_default_gateway = CalmVariable.Simple(
            "",
            label="External network default gateway",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        internal_network_is_managed = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Internal network is managed",
            default="No",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Indicates whether the current file server network is managed or unmanaged.\n\n",
        )
        external_network_ip_address = CalmVariable.Simple(
            "",
            label="External network ip address",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        external_network_is_managed = CalmVariable.WithOptions(
            ["No", "Yes"],
            label="External network is managed",
            default="No",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Indicates whether the current file server network is managed or unmanaged.\n\n",
        )
        dns_domain_name = CalmVariable.Simple(
            "",
            label="DNS domain name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Fully qualified domain name (file server namespace). This, along with the file server name, constitutes the namespace of the file server. Example: fileserver_name.corp.companyname.com. This is also used to create file server DNS entries on the nameservers so that clients can access the file server using its name.",
        )
        file_blocking_extensions = CalmVariable.Simple(
            "",
            label="File blocking extensions",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description='List of file blocking extensions or patterns. For Ex: [".db",".txt",".mp3"].\n\n',
        )
        compression_enabled = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Compression enabled",
            default="Yes",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Filesystem compression value. For file servers greater than 3.6 version, the filesystem compression is enabled by default.\n\n",
        )
        rebalance_enabled = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Rebalance enabled",
            default="No",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="This flag indicates if file server recommendations are available and the user has to perform actions.\n",
        )
        file_server_version = CalmVariable.Simple(
            "",
            label="File server version",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="File server version.",
        )
        file_server_size_in_gb = CalmVariable.Simple.int(
            "",
            label="File server size",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="File server size in Gib.\n\n",
        )
        storage_container = CalmVariable.Simple(
            "",
            label="Storage Container",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The container associated with the file server.\n\n",
        )
        file_server_name = CalmVariable.Simple(
            "",
            label="Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="File server name.\n\n",
        )
        cluster_name = CalmVariable.Simple(
            "",
            label="Cluster name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Cluster name for on prem deployment",
        )
        vm_memory_gib = CalmVariable.Simple.int(
            "12",
            label="VM Memory in GB",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="VM Memory in GB",
        )
        vm_vcpu = CalmVariable.Simple.int(
            "4",
            label="VM VCPUS",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="VM VCPUS",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Create file server",
            filename=os.path.join(
                "scripts",
                "ResourceType_FileServer_Action_Create_Task_Createfileserver.py",
            ),
            variables=["task_uuid"],
        )

    @action
    def List(type="resource_type_list"):

        select = CalmVariable.Simple(
            "extId, name, sizeInGib",
            label="Select",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the OData V4.01 URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e. *), then all properties on the matching resource will be returned.",
        )
        order_by = CalmVariable.Simple(
            "name",
            label="Order by",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified the resources will be sorted in ascending order by default. For example, '$orderby=templateName desc' would get all templates sorted by templateName in desc order. The orderby can be applied to the following fields:\n\ncompressionEnabled\ncontainerExtId\ndnsDomainName\nisCompressionEnabled\nname\nsizeGiBytes\nsizeInGib\nversion",
        )
        filter = CalmVariable.Simple(
            "",
            label="Filter",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions. For example, filter '$filter=name eq 'karbon-ntnx-1.0' would filter result on cluster name karbon-ntnx1.0, filter '$filter=startswith(name, 'C')' would filter on cluster name starting with C. The filter can be applied on the following fields:\n\ncompressionEnabled\ncontainerExtId\ndnsDomainName\nisCompressionEnabled\nname\nsizeGiBytes\nsizeInGib\nversion",
        )
        limit = CalmVariable.Simple.int(
            "50",
            label="Limit",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided a default value of 50 records will be returned in the result set.",
        )
        page = CalmVariable.Simple.int(
            "0",
            label="Page",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that specifies the page number of the result set. Must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range will lead to no results being returned.",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="file_servers",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="List file servers",
            filename=os.path.join(
                "scripts", "ResourceType_FileServer_Action_List_Task_Listfileservers.py"
            ),
            variables=["file_servers"],
        )

    @action
    def Get(type="resource_type_generic"):

        file_server_name = CalmVariable.Simple(
            "",
            label="File server name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The name of the file server",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="file_server",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Get file server",
            filename=os.path.join(
                "scripts", "ResourceType_FileServer_Action_Get_Task_Getfileserver.py"
            ),
            variables=["file_server"],
        )

    @action
    def Update(type="resource_type_generic"):

        wait = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Wait for the operation to complete",
            default="Yes",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="",
        )
        dns_servers = CalmVariable.Simple(
            "",
            label="DNS servers",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="List of DNS servers associated with the file server, accepts comma seperated values",
        )
        ntp_servers = CalmVariable.Simple(
            "",
            label="NTP servers",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="The list of IP or FQDN of the NTP servers associated with the file server, accepts comma separated values",
        )
        vm_count = CalmVariable.Simple.int(
            "",
            label="VM Count",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Total number of file server VMs. This cannot exceed the number of available CVMs in the associated cluster.\n",
        )
        dns_domain_name = CalmVariable.Simple(
            "",
            label="DNS domain name",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Fully qualified domain name (file server namespace). This, along with the file server name, constitutes the namespace of the file server. Example: fileserver_name.corp.companyname.com. This is also used to create file server DNS entries on the nameservers so that clients can access the file server using its name.",
        )
        file_blocking_extensions = CalmVariable.Simple(
            "",
            label="File blocking extensions",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description='List of file blocking extensions or patterns. For Ex: [".db",".txt",".mp3"].\n\n',
        )
        compression_enabled = CalmVariable.WithOptions(
            ["Yes", "No", "-"],
            label="Compression enabled",
            default="-",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Filesystem compression value. For file servers greater than 3.6 version, the filesystem compression is enabled by default.\n\n",
        )
        rebalance_enabled = CalmVariable.WithOptions(
            ["Yes", "No", "-"],
            label="Rebalance enabled",
            default="-",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="This flag indicates if file server recommendations are available and the user has to perform actions.\n",
        )
        file_server_size_in_gb = CalmVariable.Simple.int(
            "",
            label="File server size",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="File server size in Gib.\n\n",
        )
        vm_vcpu = CalmVariable.Simple.int(
            "",
            label="VM VCPUS",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="VM VCPUS",
        )
        vm_memory_gib = CalmVariable.Simple.int(
            "",
            label="VM Memory in GB",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="VM Memory in GB",
        )
        file_server_name = CalmVariable.Simple(
            "",
            label="Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="File server name.\n\n",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Update file server",
            filename=os.path.join(
                "scripts",
                "ResourceType_FileServer_Action_Update_Task_Updatefileserver.py",
            ),
            variables=["task_uuid"],
        )

    @action
    def Listmounttargets(name="List mount targets", type="resource_type_generic"):

        select = CalmVariable.Simple(
            "name,extId,maxSizeGiBytes,path,protocol",
            label="Select",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the OData V4.01 URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e. *), then all properties on the matching resource will be returned.",
        )
        order_by = CalmVariable.Simple(
            "name",
            label="Order by",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified the resources will be sorted in ascending order by default. For example, '$orderby=templateName desc' would get all templates sorted by templateName in desc order. The orderby can be applied to the following fields:",
        )
        filter = CalmVariable.Simple(
            "",
            label="Filter",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions. For example, filter '$filter=name eq 'karbon-ntnx-1.0' would filter result on cluster name karbon-ntnx1.0, filter '$filter=startswith(name, 'C')' would filter on cluster name starting with C",
        )
        limit = CalmVariable.Simple.int(
            "50",
            label="Limit",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided a default value of 50 records will be returned in the result set.",
        )
        page = CalmVariable.Simple.int(
            "0",
            label="Page",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that specifies the page number of the result set. Must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range will lead to no results being returned.",
        )
        file_server_name = CalmVariable.Simple(
            "",
            label="File server name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Name of the file server to get the mounts for",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="mount_targets",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="List mount targets",
            filename=os.path.join(
                "scripts",
                "ResourceType_FileServer_Action_Listmounttargets_Task_Listmounttargets.py",
            ),
            variables=["mount_targets"],
        )

    @action
    def CreateSMBmount(name="Create SMB mount", type="resource_type_generic"):

        description = CalmVariable.Simple(
            "",
            label="Description",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Mount target description.\n\n",
        )
        type = CalmVariable.WithOptions(
            ["GENERAL", "DISTRIBUTED", "STANDARD", "HOMES"],
            label="Type",
            default="GENERAL",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Supported mount target types.\n\n",
        )
        access_based_enumeration_enabled = CalmVariable.WithOptions(
            ["No", "Yes"],
            label="Access Based Enumeration Enbaled",
            default="No",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Flag to enable access based enumeration.\n\n",
        )
        encryption_enabled = CalmVariable.WithOptions(
            ["No", "Yes"],
            label="Encryption Enabled",
            default="No",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Flag to enable SMB3 encryption.\n\n",
        )
        ca_enabled = CalmVariable.WithOptions(
            ["No", "Yes"],
            label="CA Enabled",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Flag to enable continuous availability feature for SMB mount targets.",
        )
        share_acl = CalmVariable.Simple.multiline(
            "",
            label="Share ACL",
            regex="^(.|\\n)*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Access control list(ACL) for SMB share\n\nAccepts command seperated values in format\n<user_or_group_name>:<permission_type>:<smb_access_type>, ...",
        )
        compression_enabled = CalmVariable.WithOptions(
            ["No", "Yes"],
            label="Compression Enabled",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Flag to enable compression.\n\n",
        )
        max_size_in_gb = CalmVariable.Simple.int(
            "",
            label="Max size in GB",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Maximum size of mount target in GiB.\n\n",
        )
        path = CalmVariable.Simple(
            "",
            label="Path",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Path of the nested mount target.\n\n",
        )
        mount_target_name = CalmVariable.Simple(
            "",
            label="Mount target name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Mount target name.\n\n",
        )
        file_server_name = CalmVariable.Simple(
            "",
            label="File server name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Name of the file server to create mount target ",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Create SMB mount",
            filename=os.path.join(
                "scripts",
                "ResourceType_FileServer_Action_CreateSMBmount_Task_CreateSMBmount.py",
            ),
            variables=["task_uuid"],
        )

    @action
    def Getmounttarget(name="Get mount target", type="resource_type_generic"):

        file_server_name = CalmVariable.Simple(
            "",
            label="File server name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Name of the file server",
        )
        mount_target_name = CalmVariable.Simple(
            "",
            label="Mount target name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Mount target name",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="mount_target",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Get mount target",
            filename=os.path.join(
                "scripts",
                "ResourceType_FileServer_Action_Getmounttarget_Task_Getmounttarget.py",
            ),
            variables=["mount_target"],
        )

    @action
    def UpdateSMBmount(name="Update SMB mount", type="resource_type_generic"):

        description = CalmVariable.Simple(
            "",
            label="Description",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Mount target description.\n\n",
        )
        type = CalmVariable.WithOptions(
            ["GENERAL", "DISTRIBUTED", "STANDARD", "HOMES"],
            label="Type",
            default="GENERAL",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Supported mount target types.\n\n",
        )
        access_based_enumeration_enabled = CalmVariable.WithOptions(
            ["No", "Yes", "-"],
            label="Access Based Enumeration Enbaled",
            default="-",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Flag to enable access based enumeration.\n\n",
        )
        encryption_enabled = CalmVariable.WithOptions(
            ["No", "Yes", "-"],
            label="Encryption Enabled",
            default="-",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Flag to enable SMB3 encryption.\n\n",
        )
        ca_enabled = CalmVariable.WithOptions(
            ["No", "Yes", "-"],
            label="CA Enabled",
            default="-",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Flag to enable continuous availability feature for SMB mount targets.",
        )
        share_acl = CalmVariable.Simple.multiline(
            "",
            label="Share ACL",
            regex="^(.|\\n)*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Access control list(ACL) for SMB share\n\nAccepts command seperated values in format\n<user_or_group_name>:<permission_type>:<smb_access_type>, ...",
        )
        compression_enabled = CalmVariable.WithOptions(
            ["No", "Yes", "-"],
            label="Compression Enabled",
            default="-",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Flag to enable compression.\n\n",
        )
        max_size_in_gb = CalmVariable.Simple.int(
            "",
            label="Max size in GB",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Maximum size of mount target in GiB.\n\n",
        )
        path = CalmVariable.Simple(
            "",
            label="Path",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Path of the nested mount target.\n\n",
        )
        mount_target_name = CalmVariable.Simple(
            "",
            label="Mount target name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Mount target name.\n\n",
        )
        file_server_name = CalmVariable.Simple(
            "",
            label="File server name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Name of the file server to create mount target ",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Update SMB mount",
            filename=os.path.join(
                "scripts",
                "ResourceType_FileServer_Action_UpdateSMBmount_Task_UpdateSMBmount.py",
            ),
            variables=["task_uuid"],
        )


class ObjectStore(ResourceType):
    """Resource Type to manage Nutanix Object Stores.

    API version that start with prefix "a" are experimental and not meant for production use"""

    name = "Object Store"

    resource_kind = "Storage"

    icon_name = "Object Store"

    schemas = []

    variables = [
        CalmVariable.Simple(
            "v4.0.b1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="networking_api_version",
        ),
        CalmVariable.Simple(
            "v4.0.b2",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="cluster_mgt_api_version",
        ),
        CalmVariable.Simple(
            "v4.0.b1",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="prism_api_version",
        ),
        CalmVariable.Simple(
            "v4.0.a2",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="objects_api_version",
        ),
    ]

    @action
    def Create(type="resource_type_create"):
        """Action to create an object store"""

        wait = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Wait",
            default="Yes",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Whether to wait for the operation to complete ",
        )
        total_capacity_gib = CalmVariable.Simple.int(
            "",
            label="Total Capacity in GB",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Size of the Object store in GiB.\n\n",
        )
        public_network_ips = CalmVariable.Simple(
            "",
            label="Public Network IPs",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A list of static IP addresses used as public IPs to access the Object store. (comma separated)\n\n",
        )
        public_network = CalmVariable.Simple(
            "",
            label="Public Network",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Public network reference of the Object store. This is the subnet for AHV cluster or the IPAM name for an ESXi cluster.",
        )
        storage_network_dns_ip = CalmVariable.Simple(
            "",
            label="Storage Network DNS IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="An unique address that identifies a device on the internet or a local network in IPv4.",
        )
        storage_network_vip = CalmVariable.Simple(
            "",
            label="Storage Network VIP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="An unique address that identifies a device on the internet or a local network in IPv4.",
        )
        storage_network = CalmVariable.Simple(
            "",
            label="Storage Network",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Reference to the Storage Network of the Object store. This is the subnet for an AHV cluster or the IPAM name for an ESXi cluster.\n\n",
        )
        cluster = CalmVariable.Simple(
            "",
            label="Cluster",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Name of the cluster ",
        )
        number_of_worker_nodes = CalmVariable.Simple.int(
            "",
            label="Number of worker nodes",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.",
        )
        region = CalmVariable.Simple(
            "",
            label="Region",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="The region in which the Object store is deployed",
        )
        domain = CalmVariable.Simple(
            "",
            label="Domain",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="The DNS domain/subdomain the Object store belongs to. All the Object stores under one Prism Central must have the same domain name. The domain name must consist of at least 2 parts separated by a '.'. Each part can contain upper and lower case letters, digits, hyphens, or underscores. Each part can be up to 63 characters long. The domain must begin and end with an alphanumeric character. For example - 'objects-0.pc_nutanix.com'",
        )
        deployment_version = CalmVariable.Simple(
            "",
            label="Deployment Version",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Object store deployment version",
        )
        description = CalmVariable.Simple(
            "",
            label="Description",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A brief description of the Object store",
        )
        object_store_name = CalmVariable.Simple(
            "",
            label="Object Store Name",
            regex="^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]))*([A-Za-z]|[A-Za-z][A-Za-z0-9-]*[A-Za-z0-9])$",
            validate_regex=True,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The name of the Object store.\n\n",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Create Object Storage",
            filename=os.path.join(
                "scripts",
                "ResourceType_ObjectStore_Action_Create_Task_CreateObjectStorage.py",
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def Delete(type="resource_type_delete"):
        """Action to delete an object store"""

        wait = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Wait",
            default="Yes",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Whether to wait for the operation to complete",
        )
        object_store_name = CalmVariable.Simple(
            "",
            label="",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The name of the object store that needs to be deleted",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Delete object store",
            filename=os.path.join(
                "scripts",
                "ResourceType_ObjectStore_Action_Delete_Task_Deleteobjectstore.py",
            ),
            variables=["task_uuid", "task_status"],
        )

    @action
    def List(type="resource_type_list"):
        """Action to list object stores"""

        select = CalmVariable.Simple(
            "*",
            label="Select",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to request a specific set of properties for each entity or complex type. Expression specified with the $select must conform to the OData V4.01 URL conventions. If a $select expression consists of a single select item that is an asterisk (i.e., *), then all properties on the matching resource will be returned.",
        )
        expand = CalmVariable.Simple(
            "",
            label="Expand",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to request related resources when a resource that satisfies a particular request is retrieved. Each expanded item is evaluated relative to the entity containing the property being expanded. Other query options can be applied to an expanded property by appending a semicolon-separated list of query options, enclosed in parentheses, to the property name. Permissible system query options are $filter, $select and $orderby.",
        )
        orderby = CalmVariable.Simple(
            "name",
            label="Order by",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to specify the sort criteria for the returned list of objects. Resources can be sorted in ascending order using asc or descending order using desc. If asc or desc are not specified, the resources will be sorted in ascending order by default. For example, '$orderby=templateName desc' would get all templates sorted by templateName in descending order",
        )
        filter = CalmVariable.Simple(
            "",
            label="Filter",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that allows clients to filter a collection of resources. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. Expression specified with the $filter must conform to the OData V4.01 URL conventions. For example, filter '$filter=name eq 'karbon-ntnx-1.0' would filter the result on cluster name 'karbon-ntnx1.0', filter '$filter=startswith(name, 'C')' would filter on cluster name starting with 'C'.",
        )
        limit = CalmVariable.Simple.int(
            "50",
            label="Limit",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that specifies the total number of records returned in the result set. Must be a positive integer between 1 and 100. Any number out of this range will lead to a validation error. If the limit is not provided, a default value of 50 records will be returned in the result set.",
        )
        page = CalmVariable.Simple.int(
            "0",
            label="Page",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A URL query parameter that specifies the page number of the result set. It must be a positive integer between 0 and the maximum number of pages that are available for that resource. Any number out of this range might lead to no results.\n\n",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="object_stores",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="List Object Store",
            filename=os.path.join(
                "scripts",
                "ResourceType_ObjectStore_Action_List_Task_ListObjectStore.py",
            ),
            variables=["object_stores"],
        )

    @action
    def Get(type="resource_type_generic"):
        """Action to fetch a specified object store"""

        object_store_name = CalmVariable.Simple(
            "",
            label="Object Store Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The name of the object store",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="object_store",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Get an object store",
            filename=os.path.join(
                "scripts",
                "ResourceType_ObjectStore_Action_Get_Task_Getanobjectstore.py",
            ),
            variables=["object_store"],
        )

    @action
    def Update(type="resource_type_generic"):
        """Action to update an object store"""

        wait = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Wait",
            default="Yes",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Whether to wait for the operation to complete ",
        )
        total_capacity_gib = CalmVariable.Simple.int(
            "",
            label="Total Capacity in GB",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Size of the Object store in GiB.\n\n",
        )
        public_network_ips = CalmVariable.Simple(
            "",
            label="Public Network IPs",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A list of static IP addresses used as public IPs to access the Object store.\n\n",
        )
        public_network = CalmVariable.Simple(
            "",
            label="Public Network",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Public network reference of the Object store. This is the subnet for AHV cluster or the IPAM name for an ESXi cluster.",
        )
        storage_network_dns_ip = CalmVariable.Simple(
            "",
            label="Storage Network DNS IP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="An unique address that identifies a device on the internet or a local network in IPv4.",
        )
        storage_network_vip = CalmVariable.Simple(
            "",
            label="Storage Network VIP",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="An unique address that identifies a device on the internet or a local network in IPv4.",
        )
        storage_network = CalmVariable.Simple(
            "",
            label="Storage Network",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Reference to the Storage Network of the Object store. This is the subnet for an AHV cluster or the IPAM name for an ESXi cluster.\n\n",
        )
        cluster = CalmVariable.Simple(
            "",
            label="Cluster",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Name of the cluster ",
        )
        number_of_worker_nodes = CalmVariable.Simple.int(
            "",
            label="Number of worker nodes",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="The number of worker nodes (VMs) to be created for the Object store. Each worker node requires 10 vCPUs and 32 GiB of memory.",
        )
        region = CalmVariable.Simple(
            "",
            label="Region",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="The region in which the Object store is deployed",
        )
        domain = CalmVariable.Simple(
            "",
            label="Domain",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="The DNS domain/subdomain the Object store belongs to. All the Object stores under one Prism Central must have the same domain name. The domain name must consist of at least 2 parts separated by a '.'. Each part can contain upper and lower case letters, digits, hyphens, or underscores. Each part can be up to 63 characters long. The domain must begin and end with an alphanumeric character. For example - 'objects-0.pc_nutanix.com'",
        )
        deployment_version = CalmVariable.Simple(
            "",
            label="Deployment Version",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Object store deployment version",
        )
        description = CalmVariable.Simple(
            "",
            label="Description",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="A brief description of the Object store",
        )
        object_store_name = CalmVariable.Simple(
            "",
            label="Object Store Name",
            regex="^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]))*([A-Za-z]|[A-Za-z][A-Za-z0-9-]*[A-Za-z0-9])$",
            validate_regex=True,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="The name of the Object store that needs to be updated\n\n",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_uuid",
            ),
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Update Object Storage",
            filename=os.path.join(
                "scripts",
                "ResourceType_ObjectStore_Action_Update_Task_UpdateObjectStorage.py",
            ),
            variables=["task_uuid", "task_status"],
        )


class Bucket(ResourceType):
    """Resource Type to manage Nutanix Buckets.

    API version that start with prefix "a" are experimental and not meant for production use"""

    resource_kind = "Storage"

    icon_name = "Bucket"

    schemas = []

    variables = [
        CalmVariable.Simple(
            "v4.0.a2",
            label="",
            is_mandatory=False,
            is_hidden=False,
            runtime=False,
            description="",
            name="objects_api_version",
        ),
    ]

    @action
    def Create(type="resource_type_create"):
        """Action to create a Bucket in specified object store"""

        wait = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Wait",
            default="Yes",
            regex="^.*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="whether to wait for the task to completed",
        )
        non_current_version_expiration_days = CalmVariable.Simple.int(
            "",
            label="Non current version expiration",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Non current version expiration",
        )
        expiration_days = CalmVariable.Simple.int(
            "",
            label="Expiration Days",
            regex="^[\\d]*$",
            validate_regex=False,
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Expiration Days",
        )
        enable_versioning = CalmVariable.WithOptions(
            ["Yes", "No"],
            label="Enable Versioning",
            default="No",
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Enable or disable versioning of bucket",
        )
        bucket_name = CalmVariable.Simple(
            "",
            label="Bucket Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Name of the bucket to be created",
        )
        object_store_name = CalmVariable.Simple(
            "",
            label="Object store name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Name of the object store",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="task_status",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="Create Bucket",
            filename=os.path.join(
                "scripts", "ResourceType_Bucket_Action_Create_Task_CreateBucket.py"
            ),
            variables=["task_status"],
        )

    @action
    def Delete(type="resource_type_delete"):
        """Action to delete a Bucket in specified object store"""

        bucket_name = CalmVariable.Simple(
            "",
            label="Bucket Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Bucket name",
        )
        object_store_name = CalmVariable.Simple(
            "",
            label="Object Store Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Name of the object store",
        )

        CalmTask.Exec.escript.py3(
            name="Delete Bucket",
            filename=os.path.join(
                "scripts", "ResourceType_Bucket_Action_Delete_Task_DeleteBucket.py"
            ),
        )

    @action
    def List(type="resource_type_list"):
        """Action to list buckets in a specified object store"""

        object_store_name = CalmVariable.Simple(
            "",
            label="Object Store Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Object Store Name",
        )

        outputs = [
            CalmVariable.Simple(
                "",
                label="",
                is_mandatory=False,
                is_hidden=False,
                runtime=False,
                description="",
                name="buckets",
            ),
        ]

        CalmTask.SetVariable.escript.py3(
            name="List Buckets",
            filename=os.path.join(
                "scripts", "ResourceType_Bucket_Action_List_Task_ListBuckets.py"
            ),
            variables=["buckets"],
        )

    @action
    def ModifyAccess(name="Modify Access", type="resource_type_generic"):
        """Action to modify acess of a Bucket"""

        permissions = CalmVariable.WithOptions.Predefined.Array(
            ["READ", "WRITE", "NONE"],
            label="Permissions",
            defaults=["READ"],
            is_mandatory=False,
            is_hidden=False,
            runtime=True,
            description="Permissions",
        )
        username = CalmVariable.Simple(
            "",
            label="Username",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Username in name_prefix@domain format",
        )
        bucket_name = CalmVariable.Simple(
            "",
            label="Bucket",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Bucket",
        )
        object_store_name = CalmVariable.Simple(
            "",
            label="Object Store Name",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="Object Store Name",
        )

        CalmTask.Exec.escript.py3(
            name="Modify Access",
            filename=os.path.join(
                "scripts",
                "ResourceType_Bucket_Action_ModifyAccess_Task_ModifyAccess.py",
            ),
        )


class NutanixPaaS(CloudProvider):
    """Provider to manage complete Nutanix infrastructure including compute, storage, network & other platform services.

    NOTE: This example provider is included for informational purposes only. Admins will need to clone and customize this provider for their own purposes when using it with any NCM entities. This example provider will not be maintained and may be deprecated in the future."""

    infra_type = "cloud"

    auth_schema_variables = [
        CalmVariable.Simple(
            "",
            label="Username",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
            name="username",
        ),
        CalmVariable.Simple.Secret(
            CloudProvider_NutanixPaaS_auth_schema_password,
            label="Password",
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
            name="password",
        ),
    ]

    variables = []

    endpoint_schema = ProviderEndpointSchema(type="NUTANIX_PC", variables=[])

    resource_types = [
        VM,
        Subnet,
        VPC,
        SecurityPolicies,
        VirtualNetworkPolicies,
        FileServer,
        ObjectStore,
        Bucket,
    ]

    @action
    def Verify(type="provider"):

        CalmTask.Exec.escript.py3(
            name="Task 1",
            filename=os.path.join(
                "scripts", "CloudProvider_NutanixPaaS_Action_Verify_Task_Task1.py"
            ),
        )
